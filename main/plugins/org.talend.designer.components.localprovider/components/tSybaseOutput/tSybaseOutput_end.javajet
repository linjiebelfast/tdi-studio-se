<%@ jet
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IProcess
    java.util.List
"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();

    String cid = node.getUniqueName();
    dbLog = new DBLogUtil(node);
    IProcess process = node.getProcess();
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

    boolean setAutoCommit = false;

    boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    String tableName = ElementParameterParser.getValue(node,"__TABLE__");

    String identityInsert = ElementParameterParser.getValue(node, "__IDENTITY_INSERT__");

    boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
    String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConn) {
        List<? extends INode> nodes = process.getNodesOfType("tSybaseConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
                break;
            }
        }
    }

    boolean useBatch = useBatchSize && (rejectConnName == null)
                     && (
                          ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                        );

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else {
    if (useBatch) {
    %>
    try {
            int countSum_<%=cid%> = 0;
            if (pstmt_<%=cid %> != null && batchSizeCounter_<%=cid%> > 0) {
                <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
                    countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                }
                <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
            }
            <%if (("INSERT").equals(dataAction)) {
            %>
                insertedCount_<%=cid%> += countSum_<%=cid%>;
            <%
            }else if (("UPDATE").equals(dataAction)) {
            %>
                updatedCount_<%=cid%> += countSum_<%=cid%>;
            <%
            }else if (("DELETE").equals(dataAction)) {
            %>
                deletedCount_<%=cid%> += countSum_<%=cid%>;
            <%
            }%>
    }catch (java.sql.BatchUpdateException e){
        <%if(("true").equals(dieOnError)) {
        %>
            throw(e);
        <%
        }else {
        %>
        int countSum_<%=cid%> = 0;
        for(int countEach_<%=cid%>: e.getUpdateCounts()) {
            countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
        }
        <%if (("INSERT").equals(dataAction)) {
        %>
            insertedCount_<%=cid%> += countSum_<%=cid%>;
        <%
        }else if (("UPDATE").equals(dataAction)) {
        %>
            updatedCount_<%=cid%> += countSum_<%=cid%>;
        <%
        }else if (("DELETE").equals(dataAction)) {
        %>
            deletedCount_<%=cid%> += countSum_<%=cid%>;
        <%
        }
        dbLog.logPrintedException("e.getMessage()");
        %>
        System.err.println(e.getMessage());
        <%
        }%>
    }
    <%
    }
    %>
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
}
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
<%
    if(("true").equals(identityInsert)){
        %>
        if(stmt_<%=cid %> != null){
            stmt_<%=cid %>.execute("SET IDENTITY_INSERT "+ <%=tableName%> +" OFF");
            stmt_<%=cid %>.close();
        }
        <%
    }

    if(!useExistingConn){
        if(!("").equals(commitEvery) && !("0").equals(commitEvery)){
            %>
        if (commitCounter_<%=cid%> > 0) {
            <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
            conn_<%=cid%>.commit();
            <%dbLog.commit().commitDone(null);%>
        }
            <%
        }
        %>
        <%dbLog.conn().closeTry(null);%>
        conn_<%=cid%> .close();
        <%dbLog.conn().closeDone(null);%>
        resourceMap.put("finish_<%=cid%>", true);
        <%
    }
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
