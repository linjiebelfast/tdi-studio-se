
<%@ jet
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
	org.talend.core.model.process.IProcess
    java.util.List
"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();

    String cid = node.getUniqueName();
    dbLog = new DBLogUtil(node);
    IProcess process = node.getProcess();
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

    boolean setAutoCommit = false;

    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

    String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");

    String tableName = ElementParameterParser.getValue(node,"__TABLE__");

    boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
	
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConn) {
        List<? extends INode> nodes = process.getNodesOfType("tEXAConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
            }
        }
    }

    boolean useBatch = useBatchSize && (rejectConnName == null)
                     && (
                          ("INSERT").equals(dataAction) || ("DELETE").equals(dataAction)
                        );

    boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    boolean createTable = "CREATE".equals(tableAction) || "DROP_CREATE".equals(tableAction) || "CREATE_IF_NOT_EXISTS".equals(tableAction) || "DROP_IF_EXISTS_AND_CREATE".equals(tableAction);

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else {
        if (useBatch) {
        %>
        try {
                int countSum_<%=cid%> = 0;
                if (pstmt_<%=cid %> != null && batchSizeCounter_<%=cid%> > 0) {
                        <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                    for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
                        countSum_<%=cid%> += (countEach_<%=cid%> != java.sql.Statement.EXECUTE_FAILED ? 1 : 0);
                    }
                        <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                }
                <%if (("INSERT").equals(dataAction)) {
                %>
                    insertedCount_<%=cid%> += countSum_<%=cid%>;
                <%
                }else if (("UPDATE").equals(dataAction)) {
                %>
                    updatedCount_<%=cid%> += countSum_<%=cid%>;
                <%
                }else if (("DELETE").equals(dataAction)) {
                %>
                    deletedCount_<%=cid%> += countSum_<%=cid%>;
                <%
                }%>
        }catch (java.lang.Exception e_<%=cid%>){
            java.sql.BatchUpdateException bue_<%=cid%> = null;
            java.sql.SQLException ne_<%=cid%> = null,sqle_<%=cid%> = null;
            if (e_<%=cid%> instanceof java.sql.BatchUpdateException) {
                bue_<%=cid%> = (java.sql.BatchUpdateException) e_<%=cid%>;
                ne_<%=cid%> = bue_<%=cid%>.getNextException();
            }
            String errormessage_<%=cid%>;
            if (ne_<%=cid%> != null) {
                // build new exception to provide the original cause
                sqle_<%=cid%> = new java.sql.SQLException(e_<%=cid%>.getMessage() + "\ncaused by: " + ne_<%=cid%>.getMessage(), ne_<%=cid%>.getSQLState(), ne_<%=cid%>.getErrorCode(), ne_<%=cid%>);
                errormessage_<%=cid%> = sqle_<%=cid%>.getMessage();
            }else{
                errormessage_<%=cid%> = e_<%=cid%>.getMessage();
            }
            <%if(("true").equals(dieOnError)) {
            %>
                if (ne_<%=cid%> != null) {
                    throw(sqle_<%=cid%>);
                }else{
                    throw(e_<%=cid%>);
                }
            <%
            }else {
            %>
                if (bue_<%=cid%> != null) {
                    int countSum_<%=cid%> = 0;
                    for(int countEach_<%=cid%> : bue_<%=cid%>.getUpdateCounts()) {
                        countSum_<%=cid%> += (countEach_<%=cid%> != java.sql.Statement.EXECUTE_FAILED ? 1 : 0);
                    }
                    <%if (("INSERT").equals(dataAction)) {
%>
                        insertedCount_<%=cid%> += countSum_<%=cid%>;
<%
                    }else if (("UPDATE").equals(dataAction)) {
%>
                        updatedCount_<%=cid%> += countSum_<%=cid%>;
<%
                    }else if (("DELETE").equals(dataAction)) {
%>
                        deletedCount_<%=cid%> += countSum_<%=cid%>;
<%
                    }
%>
                }
                <%dbLog.logPrintedException("errormessage_"+cid);%>
                System.err.println(errormessage_<%=cid%>);
<%
            }%>
        }
        <%
        }%>
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
        <%
    }
    %>
    resourceMap.put("statementClosed_<%=cid%>", true);
    <%
    if(!("true").equals(useExistingConn))
    {
        if(!("").equals(commitEvery) && !("0").equals(commitEvery))
        {
        %>
            <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
            conn_<%=cid%>.commit();
            <%dbLog.commit().commitDone(null);%>
        <%
        }

        dbLog.conn().closeTry(null);%>
        conn_<%=cid%> .close();
        <%dbLog.conn().closeDone(null);%>
        resourceMap.put("finish_<%=cid%>", true);
        <%
    }
    %>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Output/DBOutputEndGlobalVars.javajet"%>

