<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.process.IProcess
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	IProcess process = node.getProcess();

	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	boolean setAutoCommit = false;

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

	boolean extendedInsert = false;

	boolean supportDuplicateUpdate = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ON_DUPLICATE_KEY_UPDATE__"));

	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));

    String dbVersion = "" ;
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(("true").equals(useExistingConn)) {
        List<? extends INode> nodes =  process.getNodesOfType("tAmazonMysqlConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                dbVersion = ElementParameterParser.getValue(ne, "__DB_VERSION__");
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
            }
        }
    } else {
        dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
    }

	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}

    boolean  useBatch = useBatchSize && (rejectConnName == null) && "MYSQL_5".equals(dbVersion)
                     && (
                          ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                        );

	if ("INSERT".equalsIgnoreCase(dataAction)) {
		extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
	}else {
		extendedInsert = false;
	}

	String tableName = ElementParameterParser.getValue(node,"__TABLE__");

	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");

	String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
	isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

	if(extendedInsert){

		if ("MYSQL_5".equals(dbVersion)) {
  			//////////batch execute by batch size///////
    		if(!("").equals(numPerInsert ) && !("0").equals(numPerInsert )) {
    		%>
                <%if ( (rejectConnName==null) && ("INSERT").equals(dataAction)) {
                %>
                try {
                		if (batchSizeCounter_<%=cid%> != 0) {
							int countSum_<%=cid%> = 0;
							<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
							for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
								countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : 1);
							}
							<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
	            	    	<%if (("INSERT").equals(dataAction)) {
	            	    	%>
	            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
	            	    	<%
	            	    	}
	            	    	%>
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
            	    %>
            	    insertedCount_<%=cid%> += countSum_<%=cid%>;
	    	    	<%
	    	    	}
	    	    	%>
    	    		<%dbLog.logPrintedException("e.getMessage()");%>
                	System.err.println(e.getMessage());
                	<%
                	}%>
                }
                batchSizeCounter_<%=cid%> = 0;
                <%
                }
                %>
    		<%
    		}
		}
	}

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else {
    if (useBatch) {
%>
    try {
			int countSum_<%=cid%> = 0;
			<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
			for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
				countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : <%=("INSERT").equals(dataAction)? "1" : "countEach_" +cid%>);
			}
			<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
	    	<%if (("INSERT").equals(dataAction)) {
	    	%>
	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}else if (("UPDATE").equals(dataAction)) {
	    	%>
	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}else if (("DELETE").equals(dataAction)) {
	    	%>
	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}%>
    }catch (java.sql.BatchUpdateException e){
    	<%if(("true").equals(dieOnError)) {
    	%>
    		throw(e);
    	<%
    	}else {
    	%>
    	int countSum_<%=cid%> = 0;
		for(int countEach_<%=cid%>: e.getUpdateCounts()) {
			countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
		}
		<%if (("INSERT").equals(dataAction)) {
    	%>
    	insertedCount_<%=cid%> += countSum_<%=cid%>;
    	<%
    	}else if (("UPDATE").equals(dataAction)) {
    	%>
    	updatedCount_<%=cid%> += countSum_<%=cid%>;
    	<%
    	}else if (("DELETE").equals(dataAction)) {
    	%>
    	deletedCount_<%=cid%> += countSum_<%=cid%>;
    	<%
    	}%>
		<%dbLog.logPrintedException("e.getMessage()");%>
    	System.err.println(e.getMessage());
    	<%
    	}%>
	}
    <%
    }%>
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    }
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
<%
	if(!("true").equals(useExistingConn)){
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
    		%>
    		if (commitCounter_<%=cid%> > 0) {
        		<%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
        		conn_<%=cid%>.commit();
        		<%dbLog.commit().commitDone(null);%>
    		}
    		<%
		}

		commitEvery = "0";
    	%>
		<%dbLog.conn().closeTry(null);%>
    	conn_<%=cid%> .close();
    	<%dbLog.conn().closeDone(null);%>
    	resourceMap.put("finish_<%=cid%>", true);
    	<%
	}
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
